--- src/external_plugins/term_gl_ui/freetype-gl-prefix/src/freetype-gl/text-buffer.c	2019-03-17 20:36:49.000000000 -0700
+++ src/external_plugins/term_gl_ui/term_text_buffer.c	2019-03-18 22:24:17.000000000 -0700
@@ -12,6 +12,8 @@
 #include "opengl.h"
 #include "text-buffer.h"
 #include "utf8-utils.h"
+#include "term_text_buffer.h"
+#include "char_width.h"
 
 #define SET_GLYPH_VERTEX(value,x0,y0,z0,s0,t0,r,g,b,a,sh,gm) { \
     glyph_vertex_t *gv=&value;                                 \
@@ -20,58 +22,22 @@
     gv->r=r; gv->g=g; gv->b=b; gv->a=a;                        \
     gv->shift=sh; gv->gamma=gm;}
 
-// ----------------------------------------------------------------------------
-
-text_buffer_t *
-text_buffer_new( )
-{
-    text_buffer_t *self = (text_buffer_t *) malloc (sizeof(text_buffer_t));
-    self->buffer = vertex_buffer_new(
-                                     "vertex:3f,tex_coord:2f,color:4f,ashift:1f,agamma:1f" );
-    self->line_start = 0;
-    self->line_ascender = 0;
-    self->base_color.r = 0.0;
-    self->base_color.g = 0.0;
-    self->base_color.b = 0.0;
-    self->base_color.a = 1.0;
-    self->line_descender = 0;
-    self->lines = vector_new( sizeof(line_info_t) );
-    self->bounds.left   = 0.0;
-    self->bounds.top    = 0.0;
-    self->bounds.width  = 0.0;
-    self->bounds.height = 0.0;
-    return self;
-}
-
-// ----------------------------------------------------------------------------
 void
-text_buffer_delete( text_buffer_t * self )
-{
-    vector_delete( self->lines );
-    vertex_buffer_delete( self->buffer );
-    free( self );
-}
-
-// ----------------------------------------------------------------------------
+text_buffer_move_last_line( text_buffer_t * self, float dy );
 void
-text_buffer_clear( text_buffer_t * self )
-{
-    assert( self );
-
-    vertex_buffer_clear( self->buffer );
-    self->line_start = 0;
-    self->line_ascender = 0;
-    self->line_descender = 0;
-    vector_clear( self->lines );
-    self->bounds.left   = 0.0;
-    self->bounds.top    = 0.0;
-    self->bounds.width  = 0.0;
-    self->bounds.height = 0.0;
-}
+term_text_buffer_add_text( text_buffer_t * self,
+                           double col_width,
+                           vec2 * pen, markup_t * markup,
+                           const char * text, size_t length );
+void
+term_text_buffer_add_char( text_buffer_t * self,
+                           double col_width,
+                           vec2 * pen, markup_t * markup,
+                           const char * current, const char * previous );
 
 // ----------------------------------------------------------------------------
 void
-text_buffer_printf( text_buffer_t * self, vec2 *pen, ... )
+term_text_buffer_printf( text_buffer_t * self, double col_width, vec2 *pen, ... )
 {
     markup_t *markup;
     char *text;
@@ -90,31 +56,12 @@ text_buffer_printf( text_buffer_t * self
             return;
         }
         text = va_arg( args, char * );
-        text_buffer_add_text( self, pen, markup, text, 0 );
+        term_text_buffer_add_text( self, col_width, pen, markup, text, 0 );
     } while( markup != 0 );
     va_end ( args );
 }
 
 // ----------------------------------------------------------------------------
-void
-text_buffer_move_last_line( text_buffer_t * self, float dy )
-{
-    size_t i;
-    int j;
-    for( i=self->line_start; i < vector_size( self->buffer->items ); ++i )
-    {
-        ivec4 *item = (ivec4 *) vector_get( self->buffer->items, i);
-        for( j=item->vstart; j<item->vstart+item->vcount; ++j)
-        {
-            glyph_vertex_t * vertex =
-                (glyph_vertex_t *)  vector_get( self->buffer->vertices, j );
-            vertex->y -= dy;
-        }
-    }
-}
-
-
-// ----------------------------------------------------------------------------
 // text_buffer_finish_line (internal use only)
 //
 // Performs calculations needed at the end of each line of text
@@ -166,7 +113,8 @@ text_buffer_finish_line( text_buffer_t *
     if ( advancePen )
     {
         pen->x = self->origin.x;
-        pen->y += (int)(self->line_descender);
+        pen->y += (self->line_descender);
+        pen->y = floor(pen->y);
     }
 
     self->line_descender = 0;
@@ -177,7 +125,8 @@ text_buffer_finish_line( text_buffer_t *
 
 // ----------------------------------------------------------------------------
 void
-text_buffer_add_text( text_buffer_t * self,
+term_text_buffer_add_text( text_buffer_t * self,
+                      double col_width,
                       vec2 * pen, markup_t * markup,
                       const char * text, size_t length )
 {
@@ -220,7 +169,7 @@ text_buffer_add_text( text_buffer_t * se
 
     for( i = 0; length; i += utf8_surrogate_len( text + i ) )
     {
-        text_buffer_add_char( self, pen, markup, text + i, prev_character );
+        term_text_buffer_add_char( self, col_width, pen, markup, text + i, prev_character );
         prev_character = text + i;
         length--;
     }
@@ -230,7 +179,8 @@ text_buffer_add_text( text_buffer_t * se
 
 // ----------------------------------------------------------------------------
 void
-text_buffer_add_char( text_buffer_t * self,
+term_text_buffer_add_char( text_buffer_t * self,
+                      double col_width,
                       vec2 * pen, markup_t * markup,
                       const char * current, const char * previous )
 {
@@ -267,6 +217,7 @@ text_buffer_add_char( text_buffer_t * se
     if( *current == '\n' )
     {
         text_buffer_finish_line(self, pen, true);
+        pen->y -= 1;
         return;
     }
 
@@ -284,6 +235,9 @@ text_buffer_add_char( text_buffer_t * se
     }
     pen->x += kerning;
 
+    size_t width = char_width((wchar_t)glyph->codepoint);
+    float glyph_advance_x = (col_width * width) * (1.0f + markup->spacing);
+
     // Background
     if( markup->background_color.alpha > 0 )
     {
@@ -292,9 +246,9 @@ text_buffer_add_char( text_buffer_t * se
         float b = markup->background_color.b;
         float a = markup->background_color.a;
         float x0 = ( pen->x -kerning );
-        float y0 = (float)(int)( pen->y + font->descender );
-        float x1 = ( x0 + glyph->advance_x );
-        float y1 = (float)(int)( y0 + font->height + font->linegap );
+        float y0 = (float)(int)( floor(pen->y + font->descender) );
+        float x1 = ( x0 + glyph_advance_x );
+        float y1 = (float)(int)( pen->y + markup->font->ascender + 1);
         float s0 = black->s0;
         float t0 = black->t0;
         float s1 = black->s1;
@@ -327,7 +281,7 @@ text_buffer_add_char( text_buffer_t * se
         float a = markup->underline_color.a;
         float x0 = ( pen->x - kerning );
         float y0 = (float)(int)( pen->y + font->underline_position );
-        float x1 = ( x0 + glyph->advance_x );
+        float x1 = ( x0 + glyph_advance_x );
         float y1 = (float)(int)( y0 + font->underline_thickness );
         float s0 = black->s0;
         float t0 = black->t0;
@@ -361,7 +315,7 @@ text_buffer_add_char( text_buffer_t * se
         float a = markup->overline_color.a;
         float x0 = ( pen->x -kerning );
         float y0 = (float)(int)( pen->y + (int)font->ascender );
-        float x1 = ( x0 + glyph->advance_x );
+        float x1 = ( x0 + glyph_advance_x );
         float y1 = (float)(int)( y0 + (int)font->underline_thickness );
         float s0 = black->s0;
         float t0 = black->t0;
@@ -450,90 +404,6 @@ text_buffer_add_char( text_buffer_t * se
         icount += 6;
 
         vertex_buffer_push_back( buffer, vertices, vcount, indices, icount );
-        pen->x += glyph->advance_x * (1.0f + markup->spacing);
+        pen->x += glyph_advance_x;
     }
 }
-
-// ----------------------------------------------------------------------------
-void
-text_buffer_align( text_buffer_t * self, vec2 * pen,
-                   enum Align alignment )
-{
-    if (ALIGN_LEFT == alignment)
-    {
-        return;
-    }
-
-    size_t total_items = vector_size( self->buffer->items );
-    if ( self->line_start != total_items )
-    {
-        text_buffer_finish_line( self, pen, false );
-    }
-
-
-    size_t i, j;
-    int k;
-    float self_left, self_right, self_center;
-    float line_left, line_right, line_center;
-    float dx;
-
-    self_left = self->bounds.left;
-    self_right = self->bounds.left + self->bounds.width;
-    self_center = (self_left + self_right) / 2;
-
-    line_info_t* line_info;
-    size_t lines_count, line_end;
-
-    lines_count = vector_size( self->lines );
-    for ( i = 0; i < lines_count; ++i )
-    {
-        line_info = (line_info_t*)vector_get( self->lines, i );
-
-        if ( i + 1 < lines_count )
-        {
-            line_end = ((line_info_t*)vector_get( self->lines, i + 1 ))->line_start;
-        }
-        else
-        {
-            line_end = vector_size( self->buffer->items );
-        }
-
-        line_right = line_info->bounds.left + line_info->bounds.width;
-
-        if ( ALIGN_RIGHT == alignment )
-        {
-            dx = self_right - line_right;
-        }
-        else // ALIGN_CENTER
-        {
-            line_left = line_info->bounds.left;
-            line_center = (line_left + line_right) / 2;
-            dx = self_center - line_center;
-        }
-
-        dx = roundf( dx );
-
-        for( j=line_info->line_start; j < line_end; ++j )
-        {
-            ivec4 *item = (ivec4 *) vector_get( self->buffer->items, j);
-            for( k=item->vstart; k<item->vstart+item->vcount; ++k)
-            {
-                glyph_vertex_t * vertex =
-                                   (glyph_vertex_t *)vector_get( self->buffer->vertices, k );
-                vertex->x += dx;
-            }
-        }
-    }
-}
-
-vec4
-text_buffer_get_bounds( text_buffer_t * self, vec2 * pen )
-{
-    size_t total_items = vector_size( self->buffer->items );
-    if ( self->line_start != total_items )
-    {
-        text_buffer_finish_line( self, pen, false );
-    }
-
-    return self->bounds;
-}
